//策略模式
demo1: validator={
   validate: function (value, type) {
                switch (type) {
                    case 'isNonEmpty ':
                        {
                            return true; // NonEmpty 验证结果
                        }
                    case 'isNumber ':
                        {
                            return true; // Number 验证结果
                            break;
                        }
                    case 'isAlphaNum ':
                        {
                            return true; // AlphaNum 验证结果
                        }
                    default:
                        {
                            return true;
                        }
                }
            }
}
    //  测试
  alert(validator.validate("123", "isNonEmpty"));
  
  //使用策略模式处理类
  var validator={
        //所有可以的验证的规则处理类存放的地方，后面单独定义
        types:{},
        //验证类型对应的错误信息
        message:[],
        //当然需要使用的验证类型
        confing:{},
        //暴露的公开验证方法
        //传入的参数是key=>value对
        validator:function(data){
         var i,msg,type,checker,result_ok;
         //清空所有的错误信息
         this.message=[]
         for(i in data){
          if(data.hasOwnProperty(i)){
             type=this.config[i]; //根据key查询是否存在的验证规则
             checker=this.types[type];　//获取验证规则的验证类
             if(!type){
               continue; //如果验证不存在，则不处理
             }
             if(!checker){
               throw{
                name:'ValidationError',
                message:'No handler to validate type' +type
               }
             }
             
             result_ok=checker.validate(data[i]);//使用查到的单个验证类型进行验证
             if(!result_ok){
               msg='invalid value for *'+i+'*,'+checker.instructions;
               this.message.push(msg);
             }
           }
         
         }
        
        
        
        },
        //helper
        hasErrors:function(){
          return this.message.length!=0
        }
   }
   
   // 验证给定的值是否不为空
validator.types.isNonEmpty = {
    validate: function (value) {
        return value !== "";
    },
    instructions: "传入的值不能为空"
};

// 验证给定的值是否是数字
validator.types.isNumber = {
    validate: function (value) {
        return !isNaN(value);
    },
    instructions: "传入的值只能是合法的数字，例如：1, 3.14 or 2010"
};

// 验证给定的值是否只是字母或数字
validator.types.isAlphaNum = {
    validate: function (value) {
        return !/[^a-z0-9]/i.test(value);
    },
    instructions: "传入的值只能保护字母和数字，不能包含特殊字符"
};
使用的时候，我们首先要定义需要验证的数据集合，然后还需要定义每种数据需要验证的规则类型，代码如下：
var data = {
    first_name: "Tom",
    last_name: "Xu",
    age: "unknown",
    username: "TomXu"
};

validator.config = {
    first_name: 'isNonEmpty',
    age: 'isNumber',
    username: 'isAlphaNum'
};
最后，获取验证结果的代码就简单了：

validator.validate(data);

if (validator.hasErrors()) {
    console.log(validator.messages.join("\n"));
}
   
   
   
